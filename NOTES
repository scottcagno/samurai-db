package com.cagnosolutions.samurai;

import com.cagnosolutions.samurai.db.net.Server;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;

/**
 * Created by Scott Cagno.
 * Copyright Cagno Solutions. All rights reserved.
 */

public class Main {

	private static String s = "*3:$3:SET:$3:key:$5:value\r\n";
	private static ByteBuf buf = Unpooled.wrappedBuffer(s.getBytes());


	public static void main(String[] args) {
		/*System.out.printf("working with: %s\n", s);
		char[] buf = s.toCharArray();
		int n = getArgs(buf, 0);
		System.out.println(n);*/
		//char[] chars = new char[]{0,27,49389};
		//char c = 512;//0x0200;
		//System.out.printf("%d\n", (int) chars[1]);

		/**
		 char[] encoded = encode("SET THISISMYKEYTHISISAREALLYCOOLKEY SOMEREALLYREALLYREALLYREALLYREALLYREALLYLONGVALUE");
		 System.out.printf("ENCODED: %s\n\n", String.valueOf(encoded));

		 String decoded = decode(encoded);
		 System.out.printf("DECODED: %s\n", decoded);
		 */

		//byte[] bb = new byte[]{B.NUM_5,B.NUM_1,B.NUM_2};  // grab 4 bytes for keylen + add bytes together
		//System.out.printf("%c%c%c\n", bb[0],bb[1],bb[2]);

		/*
		int intval = Integer.MAX_VALUE;
		System.out.println(intval);

		byte[] bb = calcEncode(intval);
		System.out.printf("[%d,%d,%d,%d]\n", (int) bb[0], (int) bb[1], (int) bb[2], (int) bb[3]);

		int num = calcDecode(bb);
		System.out.println(num);
		*/

		/*
		Message message = new Message();
		byte[] encoded = message.encMsg(Message.SET, "foo".getBytes(), "bar baz".getBytes());
		System.out.printf("encoded: %s\n", Message.display(encoded));

		byte[][] decoded = message.decMsg(encoded);
		System.out.printf("decoded: %s\n", Message.display(decoded));
		*/


		Server server = new Server(9999);
		server.run();

		/*int KB = 1024;
		int MB = KB*KB;

		byte[] e = enc(KB);
		System.out.printf("[%d, %d, %d]\n", e[0], e[1], e[2]);
		System.out.println(dec(e));*/

	}

	public static byte[] enc(int len) {
		return new byte[]{
			(byte)(len & 0xff),
			(byte)((len >> 8) & 0xff),
			(byte)((len >> 16) & 0xff)
		};
	}

	public static int dec(byte[] blen) {
		int b3 = blen[2] >= 0 ? blen[2] : 256 + blen[2];
		int b2 = blen[1] >= 0 ? blen[1] : 256 + blen[1];
		int b1 = blen[0] >= 0 ? blen[0] : 256 + blen[0];

		System.out.println(((Object)blen[2]).getClass().getName());
		return b1 | (b2 << 8) | (b3 << 16);
	}

	public static boolean isBetween(int a, int b, int c) {
		return b > a ? c > a && c < b : c > b && c < a;
	}

	public static byte[] calcEncode(int n) {
		return new byte[]{
				(byte)(n & 0xff),
				(byte)((n >> 8) & 0xff),
				(byte)((n >> 16) & 0xff),
				(byte)((n >> 24) & 0xff)
		};
	}

	public static int calcDecode(byte[] b) {
		int bit4 = b[3] >= 0 ? b[3] : 256 + b[3];
		int bit3 = b[2] >= 0 ? b[2] : 256 + b[2];
		int bit2 = b[1] >= 0 ? b[1] : 256 + b[1];
		int bit1 = b[0] >= 0 ? b[0] : 256 + b[0];
		return bit1 | (bit2 << 8) | (bit3 << 16) | (bit4 << 24);
	}

	public static String decode(char[] payload) {

		// array pointer
		int pos = 0;

		// get header values
		int cmd = payload[0];
		int keylen = payload[1];
		int vallen = payload[2];

		// update array pointer (NOTE: NOT FOR PRODUCTION USE, FIND BETTER METHOD OF DOING THIS STEP)
		pos = (cmd != 0 && keylen != 0 && vallen != 0) ? 3 : 0;

		// set command value
		String command;
		if(cmd == 1)
			command = "SET";
		else if(cmd == 2)
			command = "GET";
		else if(cmd == 3)
			command = "PUT";
		else if(cmd == 4)
			command = "DEL";
		else
			command = "UNKNOWN";

		// COULD PERFORM ERROR CHECKING ON POSITION POINTER AT THIS POINT IF NEEDED

		// get the key from the payload
		char[] key = new char[keylen];
		for(int i = pos; i < keylen+pos; i++)
			key[i-pos] = payload[i];

		// update array pointer
		pos += keylen;

		// get the val from the payload
		char[] val = new char[vallen];
		for(int i = pos; i < pos + vallen; i++)
			val[i-pos] = payload[i];

		// update array pointer
		pos += vallen;

		// assemble basic payload for server consumption...
		String output = String.format("%s %s %s\n", command, String.valueOf(key), String.valueOf(val));

		// error check (COULD EASILY BE TURNED INTO A CHECKSUM)
		return (pos == payload.length) ? output : null;
	}

	public static char[] encode(String str) {

		// basic command split, NOTE: NOT FOR PRODUCTION USE, FIND BETTER METHOD OF DOING THIS STEP
		String[] ss = str.split(" ");

		// init new char array for header
		char[] header = new char[3];

		// set command byte/char
		if(ss[0].equals("SET"))
			header[0] = (char) 1;
		else if(ss[0].equals("GET"))
			header[0] = (char) 2;
		else if(ss[0].equals("PUT"))
			header[0] = (char) 3;
		else if(ss[0].equals("DEL"))
			header[0] = (char) 4;
		else
			header[0] = (char) 0;

		// set key length (max 512 (bytes))
		int keylen = ss[1].length();
		header[1] = (char) ((keylen <= (512)) ? keylen : 0);

		// set val length (max 1024^2 (1mb))
		int vallen = ss[2].length();
		header[2] = (char) ((vallen <= (1024*1024)) ? vallen : 0);

		// initialize char array for body
		char[] body = new char[keylen+vallen];

		// add key to body char array
		for(int i = 0; i < keylen; i++)
			body[i] = ss[1].charAt(i);

		// add val to body char array
		for(int i = keylen; i < keylen+vallen; i++)
			body[i] = ss[2].charAt(i-keylen);

		// combine
		char[] payload = new char[header.length + body.length];
		for(int i = 0; i < payload.length; i++)
			payload[i] = (i < header.length) ? header[i] : body[i-header.length];

		// gc
		header = null;
		body = null;

		return payload;
	}


















	public static int decode(ByteBuf buf) {
		char ch = buf.readChar();
		if(ch == '*' || ch == '$') {
			//for(int i = 0; ch = )
			//int len = Character.getNumericValue(buf.readChar());
			buf.skipBytes(1);
			//return len;
		}
		return Character.getNumericValue(buf.readChar());
	}

	public static int getArgs(char[] buf, int n) {
		if(buf.length > 2)
			if(buf[n] == '*')
				if(buf[n+1] >= '0' && buf[n+1] <= '9' && buf[n+2] == ':')
					return Character.getNumericValue(buf[n+1]);
		return Character.getNumericValue(-1);
	}

	public static int stuff(ByteBuf buf) {
		while (buf.isReadable()) {



			char ch = buf.readChar();
			if(ch >= '0' && ch <= '9')
				//buf.bytesBefore(ch);
			if (ch == '*')
				break;
			if (ch == '$')
				break;
		}
		return 0;
	}

	public static int getCount(char[] buf, int n) {
		if(buf.length > 2)
			if(buf[n] == '$')
				for(int i = n+1; buf[i] == ':'; i++) {

				}
				if(buf[n+1] >= '0' && buf[n+1] <= '9')
					n++;
					if(buf[n+2] == ':')
						return Character.getNumericValue(buf[n+1]);
					else
		return Character.getNumericValue(-1);
	}

	/**
		loops:
				for (int i = 0; i < MAX_I; i++) {
			for (int j = 0; j < MAX_J; j++) {
				// do stuff
				break loops;
			}
		}
	*/

}
